name: Test and build

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
      - master
      - develop

env:
  HYP3_REGISTRY: 626226570674.dkr.ecr.us-east-1.amazonaws.com
  S3_PYPI_HOST: hyp3-pypi.s3-website-us-east-1.amazonaws.com
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: 3.7
          activate-environment: hyp3-rtc-gamma
          environment-file: conda-env.yml
          channels: conda-forge, nodefaults

      - name: Pytest in conda environment
        shell: bash -l {0}
        run: |
          python -m pip install .
          pytest --cov=hyp3_rtc_gamma

      - name: Safety analysis of conda environment
        shell: bash -l {0}
        run: |
          python -m pip freeze | safety check --full-report --stdin
          conda list --export | awk -F '=' '/^[^#]/ {print $1 "==" $2}' | safety check --full-report --stdin


  package:
    runs-on: ubuntu-latest
    needs: pytest
    outputs:
      SDIST_VERSION:  ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          token: ${{ secrets.TOOLS_BOT_PAK }}

      - name: Get associated PR
        if: github.ref == 'refs/heads/master'
        uses: helaili/github-graphql-action@2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOOLS_BOT_PAK }}
        with:
          query: .github/queries/asssociated-pr.query.yml
          outputFile: pr.json
          owner: asfadmin
          name: hyp3-rtc-gamma
          sha: ${{ github.sha }}

      - name: Get PR labels
        if: github.ref == 'refs/heads/master'
        uses: helaili/github-graphql-action@2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOOLS_BOT_PAK }}
        with:
          query: .github/queries/pr-labels.query.yml
          outputFile: labels.json
          owner: asfadmin
          name: hyp3-rtc-gamma

      - name: Upload a Build Artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: query-responces
          path: '*.json'

      - uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel twine s3pypi "setuptools-scm[toml]" importlib_metadata
          python -m pip install bump2version

      - name: Tag version
        if: github.ref == 'refs/heads/master'
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          git config user.email "UAF-asf-apd@alaska.edu"
          git config user.name "tools-bot"

          LABEL_QUERY='.data.repository.pullRequest.labels.nodes[].name'
          SELECT='select(. == "major" or . == "minor" or . == "patch")'
          BUMP_PART=$(jq --raw-output  "${LABEL_QUERY} | ${SELECT}" labels.json | sort | head -1)

          PR_QUERY='.data.repository.commit.associatedPullRequests.edges[0].node.title'
          TAG_MSG=$(jq --raw-output "${PR_QUERY}"  pr.json)

          bump2version --current-version $(git describe --abbrev=0) \
              --tag --tag-message "${TAG_MSG}" "${BUMP_PART}"

          git push --tags
          echo "Tagged version $(git describe --abbrev=0) and pushed back to repo"

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build distribuion and upload to S3-PyPI
        id: build
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          export SDIST_VERSION=$(python setup.py --version)
          echo "::set-output name=version::${SDIST_VERSION}"
          python setup.py sdist bdist_wheel
          echo "Uploading version ${SDIST_VERSION} to S3-PyPI"
          s3pypi --bucket hyp3-pypi --force --verbose


  dockerize:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          aws s3 cp s3://hyp3-docker/software/GAMMA_SOFTWARE-20191203_MSP_ISP_DIFF_LAT.linux64_ubuntu1804.tar.gz .
          tar -zxvf GAMMA_SOFTWARE-20191203_MSP_ISP_DIFF_LAT.linux64_ubuntu1804.tar.gz
          curl -L https://github.com/asfadmin/ASF_MapReady/archive/f2bc6a7a532acc9ee0e68d579b2ddd0307972dc5.zip \
              -o ASF_MapReady-f2bc6a7a532acc9ee0e68d579b2ddd0307972dc5.zip
          unzip ASF_MapReady-f2bc6a7a532acc9ee0e68d579b2ddd0307972dc5.zip
          mv ASF_MapReady-f2bc6a7a532acc9ee0e68d579b2ddd0307972dc5 ASF_MapReady-devel

          export SDIST_VERSION=${{ needs.package.outputs.SDIST_VERSION }}
          export CI_JOB_TIMESTAMP=$(date --utc --rfc-3339=seconds)
          echo "Building ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_}"
          docker build --no-cache \
                -t ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
                --label org.opencontainers.image.created="${CI_JOB_TIMESTAMP}" \
                --label org.opencontainers.image.version="${SDIST_VERSION}" \
                --label org.opencontainers.image.revision="${GITHUB_SHA}" \
                --build-arg S3_PYPI_HOST=${S3_PYPI_HOST} \
                --build-arg SDIST_SPEC="==${SDIST_VERSION}" .
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_}

      - name: Add test tag
        if: github.ref == 'refs/heads/develop'
        run: |
          export SDIST_VERSION=${{needs.package.outputs.SDIST_VERSION}}
          docker tag ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
              ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:test
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:test

      - name: Add latest tag
        if: github.ref == 'refs/heads/master'
        run: |
          export SDIST_VERSION=${{needs.package.outputs.SDIST_VERSION}}
          docker tag ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
              ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:latest
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${HYP3_REGISTRY}